<?php

/**
 * LoginJsonld.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
/**
 * Astra v2.
 *
 * APIs for Astra Security Suite
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AstraPrefixed\GetAstra\Client\Tclient;

use ArrayAccess;
/**
 * LoginJsonld Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class LoginJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Login:jsonld';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = ['context' => 'string', 'id' => 'string', 'type' => 'string', 'id' => 'int', 'site' => 'string', 'success' => 'bool', 'ip_address' => 'string', 'blocked' => 'bool', 'country' => 'string', 'login_url' => 'string', 'username' => 'string', 'email' => 'string', 'display_name' => 'string', 'user_agent' => 'string', 'device' => 'string', 'os' => 'string', 'created_at' => '\\DateTime', 'timestamp' => '\\DateTime'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPIFormats = ['context' => null, 'id' => null, 'type' => null, 'id' => null, 'site' => 'iri-reference', 'success' => null, 'ip_address' => null, 'blocked' => null, 'country' => null, 'login_url' => null, 'username' => null, 'email' => null, 'display_name' => null, 'user_agent' => null, 'device' => null, 'os' => null, 'created_at' => 'date-time', 'timestamp' => 'date-time'];
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = ['context' => '@context', 'id' => '@id', 'type' => '@type', 'id' => 'id', 'site' => 'site', 'success' => 'success', 'ip_address' => 'ipAddress', 'blocked' => 'blocked', 'country' => 'country', 'login_url' => 'loginUrl', 'username' => 'username', 'email' => 'email', 'display_name' => 'displayName', 'user_agent' => 'userAgent', 'device' => 'device', 'os' => 'os', 'created_at' => 'createdAt', 'timestamp' => 'timestamp'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = ['context' => 'setContext', 'id' => 'setId', 'type' => 'setType', 'id' => 'setId', 'site' => 'setSite', 'success' => 'setSuccess', 'ip_address' => 'setIpAddress', 'blocked' => 'setBlocked', 'country' => 'setCountry', 'login_url' => 'setLoginUrl', 'username' => 'setUsername', 'email' => 'setEmail', 'display_name' => 'setDisplayName', 'user_agent' => 'setUserAgent', 'device' => 'setDevice', 'os' => 'setOs', 'created_at' => 'setCreatedAt', 'timestamp' => 'setTimestamp'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = ['context' => 'getContext', 'id' => 'getId', 'type' => 'getType', 'id' => 'getId', 'site' => 'getSite', 'success' => 'getSuccess', 'ip_address' => 'getIpAddress', 'blocked' => 'getBlocked', 'country' => 'getCountry', 'login_url' => 'getLoginUrl', 'username' => 'getUsername', 'email' => 'getEmail', 'display_name' => 'getDisplayName', 'user_agent' => 'getUserAgent', 'device' => 'getDevice', 'os' => 'getOs', 'created_at' => 'getCreatedAt', 'timestamp' => 'getTimestamp'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];
    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['login_url'] = isset($data['login_url']) ? $data['login_url'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        return $invalidProperties;
    }
    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === \count($this->listInvalidProperties());
    }
    /**
     * Gets context.
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }
    /**
     * Sets context.
     *
     * @param string|null $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;
        return $this;
    }
    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }
    /**
     * Sets id.
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;
        return $this;
    }
    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }
    /**
     * Sets type.
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;
        return $this;
    }
    //    /**
    //     * Gets id.
    //     *
    //     * @return int|null
    //     */
    //    public function getId() {
    //        return $this->container['id'];
    //    }
    //
    //    /**
    //     * Sets id.
    //     *
    //     * @param int|null $id id
    //     *
    //     * @return $this
    //     */
    //    public function setId($id) {
    //        $this->container['id'] = $id;
    //
    //        return $this;
    //    }
    /**
     * Gets site.
     *
     * @return string|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }
    /**
     * Sets site.
     *
     * @param string|null $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;
        return $this;
    }
    /**
     * Gets success.
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }
    /**
     * Sets success.
     *
     * @param bool|null $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;
        return $this;
    }
    /**
     * Gets ip_address.
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }
    /**
     * Sets ip_address.
     *
     * @param string|null $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;
        return $this;
    }
    /**
     * Gets blocked.
     *
     * @return bool|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }
    /**
     * Sets blocked.
     *
     * @param bool|null $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;
        return $this;
    }
    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }
    /**
     * Sets country.
     *
     * @param string|null $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;
        return $this;
    }
    /**
     * Gets login_url.
     *
     * @return string|null
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }
    /**
     * Sets login_url.
     *
     * @param string|null $login_url login_url
     *
     * @return $this
     */
    public function setLoginUrl($login_url)
    {
        $this->container['login_url'] = $login_url;
        return $this;
    }
    /**
     * Gets username.
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }
    /**
     * Sets username.
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;
        return $this;
    }
    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }
    /**
     * Sets email.
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;
        return $this;
    }
    /**
     * Gets display_name.
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }
    /**
     * Sets display_name.
     *
     * @param string|null $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;
        return $this;
    }
    /**
     * Gets user_agent.
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }
    /**
     * Sets user_agent.
     *
     * @param string|null $user_agent user_agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;
        return $this;
    }
    /**
     * Gets device.
     *
     * @return string|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }
    /**
     * Sets device.
     *
     * @param string|null $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;
        return $this;
    }
    /**
     * Gets os.
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }
    /**
     * Sets os.
     *
     * @param string|null $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;
        return $this;
    }
    /**
     * Gets created_at.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }
    /**
     * Sets created_at.
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;
        return $this;
    }
    /**
     * Gets timestamp.
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }
    /**
     * Sets timestamp.
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }
    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }
    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), \JSON_PRETTY_PRINT);
    }
    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
