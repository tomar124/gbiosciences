<?php

/**
 * GatekeeperUpdateJobGatekeeperUpdateJobInput.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
/**
 * Astra v2.
 *
 * APIs for Astra Security Suite
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AstraPrefixed\GetAstra\Client\Tclient\Model;

use ArrayAccess;
use AstraPrefixed\GetAstra\Client\Tclient\ObjectSerializer;
/**
 * GatekeeperUpdateJobGatekeeperUpdateJobInput Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class GatekeeperUpdateJobGatekeeperUpdateJobInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'GatekeeperUpdateJob-gatekeeperUpdateJob:input';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = ['status' => 'AnyType', 'status_description' => 'string', 'update_started_by' => 'string', 'php_version' => 'string', 'update_completed_at' => '\\DateTime', 'os' => 'string', 'php_modules' => 'string', 'cms' => 'string', 'cms_version' => 'string', 'server_ip' => 'string', 'astra_root_dir' => 'string', 'site' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPIFormats = ['status' => null, 'status_description' => null, 'update_started_by' => null, 'php_version' => null, 'update_completed_at' => 'date-time', 'os' => null, 'php_modules' => null, 'cms' => null, 'cms_version' => null, 'server_ip' => null, 'astra_root_dir' => null, 'site' => 'iri-reference'];
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = ['status' => 'status', 'status_description' => 'statusDescription', 'update_started_by' => 'updateStartedBy', 'php_version' => 'phpVersion', 'update_completed_at' => 'updateCompletedAt', 'os' => 'os', 'php_modules' => 'phpModules', 'cms' => 'cms', 'cms_version' => 'cmsVersion', 'server_ip' => 'serverIp', 'astra_root_dir' => 'astraRootDir', 'site' => 'site'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = ['status' => 'setStatus', 'status_description' => 'setStatusDescription', 'update_started_by' => 'setUpdateStartedBy', 'php_version' => 'setPhpVersion', 'update_completed_at' => 'setUpdateCompletedAt', 'os' => 'setOs', 'php_modules' => 'setPhpModules', 'cms' => 'setCms', 'cms_version' => 'setCmsVersion', 'server_ip' => 'setServerIp', 'astra_root_dir' => 'setAstraRootDir', 'site' => 'setSite'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = ['status' => 'getStatus', 'status_description' => 'getStatusDescription', 'update_started_by' => 'getUpdateStartedBy', 'php_version' => 'getPhpVersion', 'update_completed_at' => 'getUpdateCompletedAt', 'os' => 'getOs', 'php_modules' => 'getPhpModules', 'cms' => 'getCms', 'cms_version' => 'getCmsVersion', 'server_ip' => 'getServerIp', 'astra_root_dir' => 'getAstraRootDir', 'site' => 'getSite'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];
    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_description'] = isset($data['status_description']) ? $data['status_description'] : null;
        $this->container['update_started_by'] = isset($data['update_started_by']) ? $data['update_started_by'] : null;
        $this->container['php_version'] = isset($data['php_version']) ? $data['php_version'] : null;
        $this->container['update_completed_at'] = isset($data['update_completed_at']) ? $data['update_completed_at'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['php_modules'] = isset($data['php_modules']) ? $data['php_modules'] : null;
        $this->container['cms'] = isset($data['cms']) ? $data['cms'] : null;
        $this->container['cms_version'] = isset($data['cms_version']) ? $data['cms_version'] : null;
        $this->container['server_ip'] = isset($data['server_ip']) ? $data['server_ip'] : null;
        $this->container['astra_root_dir'] = isset($data['astra_root_dir']) ? $data['astra_root_dir'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
    }
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        return $invalidProperties;
    }
    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === \count($this->listInvalidProperties());
    }
    /**
     * Gets status.
     *
     * @return AnyType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }
    /**
     * Sets status.
     *
     * @param AnyType|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;
        return $this;
    }
    /**
     * Gets status_description.
     *
     * @return string|null
     */
    public function getStatusDescription()
    {
        return $this->container['status_description'];
    }
    /**
     * Sets status_description.
     *
     * @param string|null $status_description status_description
     *
     * @return $this
     */
    public function setStatusDescription($status_description)
    {
        $this->container['status_description'] = $status_description;
        return $this;
    }
    /**
     * Gets update_started_by.
     *
     * @return string|null
     */
    public function getUpdateStartedBy()
    {
        return $this->container['update_started_by'];
    }
    /**
     * Sets update_started_by.
     *
     * @param string|null $update_started_by update_started_by
     *
     * @return $this
     */
    public function setUpdateStartedBy($update_started_by)
    {
        $this->container['update_started_by'] = $update_started_by;
        return $this;
    }
    /**
     * Gets php_version.
     *
     * @return string|null
     */
    public function getPhpVersion()
    {
        return $this->container['php_version'];
    }
    /**
     * Sets php_version.
     *
     * @param string|null $php_version php_version
     *
     * @return $this
     */
    public function setPhpVersion($php_version)
    {
        $this->container['php_version'] = $php_version;
        return $this;
    }
    /**
     * Gets update_completed_at.
     *
     * @return \DateTime|null
     */
    public function getUpdateCompletedAt()
    {
        return $this->container['update_completed_at'];
    }
    /**
     * Sets update_completed_at.
     *
     * @param \DateTime|null $update_completed_at update_completed_at
     *
     * @return $this
     */
    public function setUpdateCompletedAt($update_completed_at)
    {
        $this->container['update_completed_at'] = $update_completed_at;
        return $this;
    }
    /**
     * Gets os.
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }
    /**
     * Sets os.
     *
     * @param string|null $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;
        return $this;
    }
    /**
     * Gets php_modules.
     *
     * @return string|null
     */
    public function getPhpModules()
    {
        return $this->container['php_modules'];
    }
    /**
     * Sets php_modules.
     *
     * @param string|null $php_modules php_modules
     *
     * @return $this
     */
    public function setPhpModules($php_modules)
    {
        $this->container['php_modules'] = $php_modules;
        return $this;
    }
    /**
     * Gets cms.
     *
     * @return string|null
     */
    public function getCms()
    {
        return $this->container['cms'];
    }
    /**
     * Sets cms.
     *
     * @param string|null $cms cms
     *
     * @return $this
     */
    public function setCms($cms)
    {
        $this->container['cms'] = $cms;
        return $this;
    }
    /**
     * Gets cms_version.
     *
     * @return string|null
     */
    public function getCmsVersion()
    {
        return $this->container['cms_version'];
    }
    /**
     * Sets cms_version.
     *
     * @param string|null $cms_version cms_version
     *
     * @return $this
     */
    public function setCmsVersion($cms_version)
    {
        $this->container['cms_version'] = $cms_version;
        return $this;
    }
    /**
     * Gets server_ip.
     *
     * @return string|null
     */
    public function getServerIp()
    {
        return $this->container['server_ip'];
    }
    /**
     * Sets server_ip.
     *
     * @param string|null $server_ip server_ip
     *
     * @return $this
     */
    public function setServerIp($server_ip)
    {
        $this->container['server_ip'] = $server_ip;
        return $this;
    }
    /**
     * Gets astra_root_dir.
     *
     * @return string|null
     */
    public function getAstraRootDir()
    {
        return $this->container['astra_root_dir'];
    }
    /**
     * Sets astra_root_dir.
     *
     * @param string|null $astra_root_dir astra_root_dir
     *
     * @return $this
     */
    public function setAstraRootDir($astra_root_dir)
    {
        $this->container['astra_root_dir'] = $astra_root_dir;
        return $this;
    }
    /**
     * Gets site.
     *
     * @return string|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }
    /**
     * Sets site.
     *
     * @param string|null $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }
    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }
    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), \JSON_PRETTY_PRINT);
    }
    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
