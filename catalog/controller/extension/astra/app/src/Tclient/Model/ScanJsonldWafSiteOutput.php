<?php

/**
 * ScanJsonldWafSiteOutput.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
/**
 * Astra v2.
 *
 * APIs for Astra Security Suite
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AstraPrefixed\GetAstra\Client\Tclient\Model;

use ArrayAccess;
use AstraPrefixed\GetAstra\Client\Tclient\ObjectSerializer;
/**
 * ScanJsonldWafSiteOutput Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class ScanJsonldWafSiteOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Scan:jsonld-waf_site:output';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = ['context' => 'string', 'id' => 'string', 'type' => 'string', 'status' => 'AstraPrefixed\\GetAstra\\Client\\Tclient\\Model\\ScanStatus', 'status_desc' => 'string', 'result' => 'AstraPrefixed\\GetAstra\\Client\\Tclient\\Model\\ScanResult', 'created_at' => '\\DateTime', 'issues_count' => 'int'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPIFormats = ['context' => null, 'id' => null, 'type' => null, 'status' => null, 'status_desc' => null, 'result' => null, 'created_at' => 'date-time', 'issues_count' => null];
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = ['context' => '@context', 'id' => '@id', 'type' => '@type', 'status' => 'status', 'status_desc' => 'statusDesc', 'result' => 'result', 'created_at' => 'createdAt', 'issues_count' => 'issuesCount'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = ['context' => 'setContext', 'id' => 'setId', 'type' => 'setType', 'status' => 'setStatus', 'status_desc' => 'setStatusDesc', 'result' => 'setResult', 'created_at' => 'setCreatedAt', 'issues_count' => 'setIssuesCount'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = ['context' => 'getContext', 'id' => 'getId', 'type' => 'getType', 'status' => 'getStatus', 'status_desc' => 'getStatusDesc', 'result' => 'getResult', 'created_at' => 'getCreatedAt', 'issues_count' => 'getIssuesCount'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];
    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_desc'] = isset($data['status_desc']) ? $data['status_desc'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['issues_count'] = isset($data['issues_count']) ? $data['issues_count'] : null;
    }
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        return $invalidProperties;
    }
    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === \count($this->listInvalidProperties());
    }
    /**
     * Gets context.
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }
    /**
     * Sets context.
     *
     * @param string|null $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;
        return $this;
    }
    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }
    /**
     * Sets id.
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;
        return $this;
    }
    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }
    /**
     * Sets type.
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;
        return $this;
    }
    /**
     * Gets status.
     *
     * @return \GetAstra\Client\Tclient\Model\ScanStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }
    /**
     * Sets status.
     *
     * @param \GetAstra\Client\Tclient\Model\ScanStatus|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;
        return $this;
    }
    /**
     * Gets status_desc.
     *
     * @return string|null
     */
    public function getStatusDesc()
    {
        return $this->container['status_desc'];
    }
    /**
     * Sets status_desc.
     *
     * @param string|null $status_desc status_desc
     *
     * @return $this
     */
    public function setStatusDesc($status_desc)
    {
        $this->container['status_desc'] = $status_desc;
        return $this;
    }
    /**
     * Gets result.
     *
     * @return \GetAstra\Client\Tclient\Model\ScanResult|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }
    /**
     * Sets result.
     *
     * @param \GetAstra\Client\Tclient\Model\ScanResult|null $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;
        return $this;
    }
    /**
     * Gets created_at.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }
    /**
     * Sets created_at.
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;
        return $this;
    }
    /**
     * Gets issues_count.
     *
     * @return int|null
     */
    public function getIssuesCount()
    {
        return $this->container['issues_count'];
    }
    /**
     * Sets issues_count.
     *
     * @param int|null $issues_count issues_count
     *
     * @return $this
     */
    public function setIssuesCount($issues_count)
    {
        $this->container['issues_count'] = $issues_count;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }
    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }
    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), \JSON_PRETTY_PRINT);
    }
    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
