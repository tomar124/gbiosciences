<?php

/**
 * BoosterJsonldWafBoosterOutput.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
/**
 * Astra v2.
 *
 * APIs for Astra Security Suite
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AstraPrefixed\GetAstra\Client\TClient\Booster;

use ArrayAccess;
use AstraPrefixed\GetAstra\Client\Tclient\ModelInterface;
use AstraPrefixed\GetAstra\Client\Tclient\ObjectSerializer;
/**
 * BoosterJsonldWafBoosterOutput Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class BoosterJsonldWafBoosterOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Booster:jsonld-waf_booster:output';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = ['context' => 'string', 'id' => 'string', 'type' => 'string', 'id' => 'int', 'site' => 'string', 'name' => 'string', 'status' => 'bool', 'created_at' => '\\DateTime', 'updated_at' => '\\DateTime', 'json_tree_format' => 'string[]', 'expression_language_format' => 'string', 'created_by' => 'AstraPrefixed\\GetAstra\\Api\\Client\\Model\\UserJsonldWafBoosterOutput', 'action' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPIFormats = ['context' => null, 'id' => null, 'type' => null, 'id' => null, 'site' => 'iri-reference', 'name' => null, 'status' => null, 'created_at' => 'date-time', 'updated_at' => 'date-time', 'json_tree_format' => null, 'expression_language_format' => null, 'created_by' => null, 'action' => null];
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = ['context' => '@context', 'id' => '@id', 'type' => '@type', 'id' => 'id', 'site' => 'site', 'name' => 'name', 'status' => 'status', 'created_at' => 'createdAt', 'updated_at' => 'updatedAt', 'json_tree_format' => 'jsonTreeFormat', 'expression_language_format' => 'expressionLanguageFormat', 'created_by' => 'createdBy', 'action' => 'action'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = ['context' => 'setContext', 'id' => 'setId', 'type' => 'setType', 'id' => 'setId', 'site' => 'setSite', 'name' => 'setName', 'status' => 'setStatus', 'created_at' => 'setCreatedAt', 'updated_at' => 'setUpdatedAt', 'json_tree_format' => 'setJsonTreeFormat', 'expression_language_format' => 'setExpressionLanguageFormat', 'created_by' => 'setCreatedBy', 'action' => 'setAction'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = ['context' => 'getContext', 'id' => 'getId', 'type' => 'getType', 'id' => 'getId', 'site' => 'getSite', 'name' => 'getName', 'status' => 'getStatus', 'created_at' => 'getCreatedAt', 'updated_at' => 'getUpdatedAt', 'json_tree_format' => 'getJsonTreeFormat', 'expression_language_format' => 'getExpressionLanguageFormat', 'created_by' => 'getCreatedBy', 'action' => 'getAction'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];
    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['json_tree_format'] = isset($data['json_tree_format']) ? $data['json_tree_format'] : null;
        $this->container['expression_language_format'] = isset($data['expression_language_format']) ? $data['expression_language_format'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
    }
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if (null === $this->container['site']) {
            $invalidProperties[] = "'site' can't be null";
        }
        if (null === $this->container['name']) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (null === $this->container['json_tree_format']) {
            $invalidProperties[] = "'json_tree_format' can't be null";
        }
        if (null === $this->container['expression_language_format']) {
            $invalidProperties[] = "'expression_language_format' can't be null";
        }
        return $invalidProperties;
    }
    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === \count($this->listInvalidProperties());
    }
    /**
     * Gets context.
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }
    /**
     * Sets context.
     *
     * @param string|null $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;
        return $this;
    }
    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }
    /**
     * Sets id.
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;
        return $this;
    }
    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }
    /**
     * Sets type.
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;
        return $this;
    }
    //    /**
    //     * Gets id.
    //     *
    //     * @return int|null
    //     */
    //    public function getId()
    //    {
    //        return $this->container['id'];
    //    }
    //
    //    /**
    //     * Sets id.
    //     *
    //     * @param int|null $id id
    //     *
    //     * @return $this
    //     */
    //    public function setId($id)
    //    {
    //        $this->container['id'] = $id;
    //
    //        return $this;
    //    }
    /**
     * Gets site.
     *
     * @return string
     */
    public function getSite()
    {
        return $this->container['site'];
    }
    /**
     * Sets site.
     *
     * @param string $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;
        return $this;
    }
    /**
     * Gets name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }
    /**
     * Sets name.
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;
        return $this;
    }
    /**
     * Gets status.
     *
     * @return bool|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }
    /**
     * Sets status.
     *
     * @param bool|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;
        return $this;
    }
    /**
     * Gets created_at.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }
    /**
     * Sets created_at.
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;
        return $this;
    }
    /**
     * Gets updated_at.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }
    /**
     * Sets updated_at.
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;
        return $this;
    }
    /**
     * Gets json_tree_format.
     *
     * @return string[]
     */
    public function getJsonTreeFormat()
    {
        return $this->container['json_tree_format'];
    }
    /**
     * Sets json_tree_format.
     *
     * @param string[] $json_tree_format json_tree_format
     *
     * @return $this
     */
    public function setJsonTreeFormat($json_tree_format)
    {
        $this->container['json_tree_format'] = $json_tree_format;
        return $this;
    }
    /**
     * Gets expression_language_format.
     *
     * @return string
     */
    public function getExpressionLanguageFormat()
    {
        return $this->container['expression_language_format'];
    }
    /**
     * Sets expression_language_format.
     *
     * @param string $expression_language_format expression_language_format
     *
     * @return $this
     */
    public function setExpressionLanguageFormat($expression_language_format)
    {
        $this->container['expression_language_format'] = $expression_language_format;
        return $this;
    }
    /**
     * Gets created_by.
     *
     * @return \GetAstra\Api\Client\Model\UserJsonldWafBoosterOutput|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }
    /**
     * Sets created_by.
     *
     * @param \GetAstra\Api\Client\Model\UserJsonldWafBoosterOutput|null $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;
        return $this;
    }
    /**
     * Gets action.
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }
    /**
     * Sets action.
     *
     * @param string|null $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }
    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }
    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), \JSON_PRETTY_PRINT);
    }
    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
